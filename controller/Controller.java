    package controller;
    import model.*;
    import util.InputValidation;
    import util.InvalidInputException;
    import view.View;

    import java.util.Scanner;

    public class Controller {
        private final Model model;
        private final View view;
        private final InputValidation inputValidator;

        private Scanner scanner;

        public Controller() {
            model = new Model();
            view = new View();
            inputValidator = new InputValidation();
            scanner = new Scanner(System.in);
        }

        public void start() {
            int choice  = getUserChoice(scanner, view.MENU_MSG + view.MENU_CHOOSE_MSG,
                    inputValidator::validateAndReturnMenuItem);
            while (choice  != View.MENU_EXIT) {
                switch (choice ) {
                    case View.MENU_CHOOSE_PARALLEL:
                        runOneAlgorithm(scanner, new ParallelDPKnapsackSolver(getUserChoice(scanner,
                                view.THREAD_NUMBER_ENTER_MSG, inputValidator::validateAndReturnThreadNumber)));
                        break;
                    case View.MENU_CHOOSE_SEQ:
                        runOneAlgorithm(scanner, new SerialDPKnapsackSolver());
                        break;
                    case View.MENU_CHOOSE_COMPARE:
                        processComparisonOption(
                                getUserChoice(scanner, view.VALUES_AUTOTEST_ENTER_MSG,
                                        inputValidator::validateAndReturnItemNumberAuto),
                                getUserChoice(scanner, view.WEIGHTS_AUTOTEST_ENTER_MSG,
                                        inputValidator::validateAndReturnCapacityAuto),
                                new SerialDPKnapsackSolver(),
                                new ParallelDPKnapsackSolver(getUserChoice(scanner,
                                        view.THREAD_NUMBER_ENTER_MSG, inputValidator::validateAndReturnThreadNumber)));
                        break;
                    default:
                        view.printMessage(view.INVALID_OPTION_MSG);
                        break;
                }
                choice  = getUserChoice(scanner, view.MENU_MSG + view.MENU_CHOOSE_MSG,
                        inputValidator::validateAndReturnMenuItem);
            }
            scanner.close();
        }

        public Parameters readItemsNumber(Scanner sc, int itemsNum) {
            return new Parameters(itemsNum,
                    getUserChoice(sc, view.MAX_CAPACITY_ENTER_MSG, inputValidator::validateAndReturnCapacity),
                    readArrayUntilCorrect(sc, itemsNum, view.WORTH_ENTER_MSG, inputValidator::validateValuesArray),
                    readArrayUntilCorrect(sc, itemsNum, view.WEIGHTS_ENTER_MSG, inputValidator::validateWeightsArray));
        }

        public void runOneAlgorithm(Scanner sc, KnapsackSolver solver) {
            model.setNewSolver(solver);
            int submenuOption = getUserChoice(sc, view.SUBMENU_MSG + view.MENU_CHOOSE_MSG,
                    inputValidator::validateAndReturnSubMenuItem);
            int n, maxCapacity;
            int[] values, weights;
            Parameters res;
            switch (submenuOption) {
                case View.SUBMENU_MANUAL:
                    n = getUserChoice(sc, view.VALUES_MANUAL_ENTER_MSG,
                            inputValidator::validateAndReturnItemNumberManual);
                    res = readItemsNumber(sc, n);
                    break;
                case View.SUBMENU_AUTO:
                    n = getUserChoice(sc, view.VALUES_AUTOGENERATED_ENTER_MSG,
                            inputValidator::validateAndReturnItemNumberAuto);
                    res = model.generateInputValues(n);
                    break;
                default:
                    view.printMessage(view.INVALID_OPTION_MSG);
                    n = 0;
                    res = null;
                    break;
            }
            if (res != null) {
                maxCapacity = res.getMaxCapacity();
                values = res.getValues();
                weights = res.getWeights();
                view.printSolution(model.solve(n, values, weights, maxCapacity));
            }
        }

        public void processComparisonOption(int maxItemNumber, int maxCapacity, KnapsackSolver referenceSolver,
                                            KnapsackSolver comparedSolver) {
            model.setNewSolver(referenceSolver);
            view.printExecutionStatus(referenceSolver);
            model.addTestSolutions(model.runTestSets(model.generateTestSets(maxItemNumber, maxCapacity)));
            model.setNewSolver(comparedSolver);
            model.addTestSolutions(model.runTestSets());
            view.printExecutionStatus(comparedSolver);
            view.printTestSolutions(model.getTestSolutions());
            view.printMessage(
//перевірка
                    model.checkIfEverythingIsSimilar(model.getTestSolutions()) ? view.TESTS_OK_MSG : view.TESTS_FAILURE_MSG);
        }

        public int getUserChoice(Scanner sc, String info, ItemValidationFunction validationFunction) {
            while (true) {
                try {
                    view.printMessage(info);
                    String input = sc.nextLine().trim();
                    int validatedInput = validationFunction.validateAndReturn(input);
                    return validatedInput;
                } catch (InvalidInputException | NumberFormatException e) {
                    view.printMessage(view.TRY_AGAIN_MSG);
                }
            }
        }

        public int[] readArrayUntilCorrect(Scanner sc, int itemNumber, String info,
                                           ArrayValidationFunction validationFunction) {
            int[] res = new int[itemNumber];
            while (true) {
                try {
                    view.printMessage(info);
                    for (int i = 0; i < itemNumber; i++) {
                        res[i] = sc.nextInt();
                    }
                    sc.nextLine();
                    validationFunction.validate(res);
                    return res;
                } catch (InvalidInputException e) {
                    view.printMessage(view.TRY_AGAIN_MSG);
                }
            }
        }
    }